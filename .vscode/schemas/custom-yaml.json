{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://recaptime.gitlab.io/verify/schema-yaml.json",
  "title": "Verification Process Endpoint Source Files",
  "description": "JSON schema implementation for YAML files in lists/**/ directories.",
  "$comments": [
    {
      "definiton": "#/$comments",
      "comment": "This array is where shcema maintainers like Andrei Jiroh usually take down notes for the future and to help other schema writers to make maintaining this schema easier.",
      "signed-off-by": "Andrei Jiroh Eugenio Halili <andreijiroh@madebythepins.tk>",
      "additionalNotes": "https://recaptime.gitlab.io/verify/docs/contributing/yaml-schema-authoring"
    },
    {
      "definiton": "#/additionalProperties",
      "comment": "We'll leave this to true in meanwhile as we need to stablize the schema and stuff towards v1.0. Once the API reached v1, we'll start to setting this to false by default in the future.",
      "signed-off-by": "Andrei Jiroh Eugenio Halili <andreijiroh@madebythepins.tk>"
    }
  ],
  "properties": {
    "apiVersion": {
      "type": "string",
      "title": "YAML Parser API version",
      "description": "API server/YAML parser version, it should match to the backend server major version we're currently at, usually prefixed with `rtapp-verify/`.\n\nWARNING: This is NOT your usual Chart.yaml or Kubernetes resource file!",
      "default": "rtapp-verify/v1"
    },
    "name": {
      "type": "string",
      "description": "For content creators, its their screen name. For communities and publishers (book publishers, music labels, any entities that publish stuff on BEHALF of content creators), it usually their public company or community name. It possible that an community has it own legal entity in terms of finanical and copyright stuff (for example the KDE Community has KDE e.V. for finanical and copyright matters, but only the KDE Community will counted here since we don't support any other types of companies/entities other than content publishers/licensors yet).",
      "examples": ["Example Screen Name", "Example Community Name"]
    },
    "legalName": {
      "type": "string",
      "description": "This is an optional field, but recommended to fill up if so. For content creators, its either their full or legal name. If their full name isn't public yet, try to use their first name from an source (YouTube Wikia, etc.) for now. For publishers, its their full company name. Communities without EITHER an legal entity OR the longer version of their community name should leave this blank.",
      "examples": ["Example Legal Company Name, LLC"],
      "dependencies": {
        "name": true
      }
    },
    "submissionType": {
      "name": "Entry Submission Type",
      "type": "string",
      "enum": [
        "unspecified",
        "reserved-for-future-use",
        "content-creator",
        "community",
        "entity:content-publisher"
      ],
      "description": "Use content-creator if the submission is for content creators, community for communities, or entity:content-publisher for Content Publisher entities. If none of above, do not submit that entry here or set it to unspecified or reserved-for-future-use.",
      "default": "unspecified"
    },
    "status": {
      "type": "string",
      "title": "Entry Availability Status",
      "description": "FOR MAINTAINERS ONLY, EDIT AT YOUR OWN RISK!\n\n* By default, this should be set to enabled to ensure new entries and changes to existing ones are available after deployment to staging/production.\n* When changing slugs, you should copy existing contents into its new filename and replace the contents here similiar to [this one](https://recaptime.gitlab.io/snippets/rtapp-verify-examples/redirect-parking). \n* You should only mark this as disabled if valid reasons are provided, such as social links are broken.\n* For community maintainers of an specific community and project maintainers, only set to banned if an valid reason OR an moderation log for the ban action is available.",
      "enum": ["enabled", "disabled", "banned", "redirect-parked"],
      "default": "enabled"
    },
    "banInfo": {
      "type": "object",
      "allOf": [
        {
          "if": {
            "properties": {
              "status": {
                "const": "banned"
              }
            }
          },
          "then": {
            "required": ["reason", "modlog"],
            "properties": {
              "reason": {
                "type": "string",
                "description": "An short reason why this entry has been blocklisted from the index.",
                "minLength": 5
              },
              "modlog": {
                "type": "string",
                "description": "Link to moderation log, either the rendered version or the source Markdown one.",
                "minLength": 5,
                "examples": [
                  "https://recaptime.github.io/advisories/modlog/rtapp-verify/BURNINATION-YYYY-abcdef123456"
                ]
              }
            }
          }
        }
      ]
    },
    "socials": {
      "type": "object",
      "description": "Social links for an specific entry. At least one working social link (should be NOT set to null) in order to be accepted in the main RecapTime/verify GitLab SaaS repo.",
      "additionalProperties": true,
      "properties": {
        "twitter": {
          "type": "object",
          "description": "Twitter profile metadata of specific entry. Currently one account at a type is supported right now.",
          "required": ["username"],
          "$comment": "While we can turn the type key of this property into an array containing 'object' and 'array', this is not yet currently supported by both the YAML parsers at server-side and our YAML linters yet.",
          "properties": {
            "username": {
              "type": "string",
              "description": "An Twitter handle of specific entry."
            },
            "fanAccount": {
              "type": "boolean",
              "description": "Whenever its an fan account or official. Set to true if it's fan account, otherwise set it to false or leave this blank. This field is optional.",
              "default": false
            },
            "verified": {
              "type": "boolean",
              "description": "Whenever this handle has verified badge besides their name to confirm authenicity.",
              "default": false
            }
          },
          "additionalProperties": false
        },
        "youtube": {
          "type": "object",
          "description": "YouTube channel metadata of specific entry. Currently one account at a type is supported right now.",
          "$comment": "While we can turn the type key of this property into an array containing 'object' and 'array', this is not yet currently supported by both the YAML parsers at server-side and our YAML linters yet.",
          "required": ["channelId", "verified"],
          "properties": {
            "username": {
              "type": "string",
              "description": "An YouTube channel username of specific entry. If channelId is also in use, then this should be ignored by API consumers, including the YAML parsers."
            },
            "channelId": {
              "type": "string",
              "description": "An YouTube channel ID of specific entry. If this entry doesn't have an YouTube channel, remove the youtube property or set this value to an blank string."
            },
            "fanAccount": {
              "type": "boolean",
              "description": "Whenever its an fan account or official. Set to true if it's fan account, otherwise set it to false or leave this blank. This field is optional.",
              "default": false
            },
            "verified": {
              "type": "boolean",
              "description": "Whenever this handle has verified badge besides their name to confirm authenicity.",
              "default": false
            },
            "partner": {
              "type": "boolean",
              "description": "Whenever their YouTube channel is part of YouTube Partner Program (YPP).\n\ntl;dr: Getting that verified badge doesn't mean they're part of YPP, through this is complicated process for the public to check whenever an specific channel is part of said program or not.",
              "default": false
            }
          },
          "additionalProperties": false
        },
        "odysee": {
          "type": "object",
          "description": "Odysee.com channel metadata for specific entry. Currently one account at a type is supported right now.",
          "$comment": "While we can turn the type key of this property into an array containing 'object' and 'array', this is not yet currently supported by both the YAML parsers at server-side and our YAML linters yet.",
          "properties": {
            "username": {
              "type": "string",
              "description": "For example, the channel link https://odysee.com/@techlore:f3 is techlore:f3 when asked for username here. Long channel claim IDs are supported, through not required."
            },
            "fanAccount": {
              "type": "boolean"
            }
          },
          "required": ["username", "fanAccount"]
        },
        "matrix": {
          "type": "array",
          "description": "An array of Matrix rooms this entry has either officially or community maintained.",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "channel": {
                "name": "Matrix Room Name",
                "description": "Room slug from the #room-name:homeserver.tld form.",
                "minLength": 3,
                "type": "string"
              },
              "homeserver": {
                "name": "Matrix Homeserver",
                "description": "Homeserver's prefix URL from the #room-name:homeserver.tld form.",
                "minLength": 5,
                "type": "string"
              },
              "inviteOnly": {
                "description": "Whenever this Matrix room is publicly accessible or requires an invite beforehand.",
                "type": "boolean",
                "default": false
              },
              "contentWarningNotice": {
                "description": "In case an specific channel has content that considered as NSFW or have controversal topics or even heated dabates currently or in the past, consider adding an CW notice.",
                "type": "string",
                "minLength": 10
              }
            }
          }
        }
      },
      "required": ["twitter"]
    },
    "annonations": {
      "type": "object",
      "name": "Entry Annonations",
      "description": "Annonations are where flags for specific entry goes here. See https://recaptime.gitlab.io/verify/docs/yaml-spec/annonations for full list of supported annonations.\n\nWARNING: This is NOT your usual Chart.yaml or Kubernetes resource file!",
      "$comment": "By default, the schema parser on the API server backend will assume unused annonation keys are set to either false or an blank string. We cannot set to null, because this might cause chaos if we did that.",
      "properties": {
        "hydralite.io/hydracore-team": {
          "type": "boolean",
          "description": "Whenever this content creator/developer is part of Hydracore team at https://hydralite.io",
          "default": false
        },
        "hydralite.io/code-contributor": {
          "type": "boolean",
          "description": "Whenever this developer contributed code to atleast one component for https://hydralite.io.",
          "default": false
        },
        "hyunsdojo.com/community-partner": {
          "type": "boolean",
          "description": "Whenever this animator is an partner at Hyun's Dojo Community. See https://recaptime.gitlab.io/verify/docs/yaml-spec/annonations/hyunsdojo.com#community-partner for details.",
          "default": false
        },
        "thepinsteam.dev/team-member": {
          "description": "Whenever this content creator/developer is an team member at The Pins Team/Recap Time.",
          "type": "boolean",
          "default": false
        },
        "recaptime.app/code-contributor": {
          "type": "boolean",
          "description": "Whenever this developer contributed code to either the main recaptime.app's client-side or server-side code, or any of its ther repos, including rtapp-verify.",
          "default": false
        },
        "gildedguy.com/production-team-member": {
          "type": "boolean",
          "description": "Whenever this animator is an currently an member of Michael Moy/Gildedguy's Production Team for Gildedguy Stories series",
          "default": false
        },
        "rtapp-verify.flags.recaptime.dev/stick-michael": {
          "type": "boolean",
          "description": "An special flag maintainers at RecapTime/app GitLab project added, must be only used for lists/creators/mikedmoy.yml, otherwise chaos may happen during MR reviews. For community maintainers and Recap Time squad members, see https://recaptime.gitlab.io/internal/docs/rtapp-verify/yaml-spec/annonations/rtapp-verify.flags.recaptime.dev/stick-michael for details.",
          "default": false
        }
      }
    }
  },
  "additionalProperties": true,
  "required": [
    "apiVersion",
    "name",
    "submissionType",
    "status",
    "socials",
    "annonations"
  ]
}
